// tsconfig.app.json
{
  "extends": "@vue/tsconfig/tsconfig.dom.json",
  "compilerOptions": {
    "composite": true, // Add this if not already in the extended config, good practice for 'references'
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",

    // --- ADD baseUrl and paths FOR ALIAS RESOLUTION ---
    "baseUrl": ".", // Assumes tsconfig.app.json is in your project root
    "paths": {
      "@/*": ["./src/*"] // Defines @/* to point to your src directory
    },
    "jsx": "preserve", // Ensure this is effectively set for Vue
    "declaration": false, 
    // --- END ALIAS RESOLUTION ---

    /* Ensure JSX is correct for Vue if you use TSX files */
    // The extended config "@vue/tsconfig/tsconfig.dom.json" should set "jsx": "preserve"
    // but if you encounter JSX issues, you can explicitly set it here:
    // "jsx": "preserve",

    /* Linting - these are good */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true,

    /* Ensure moduleResolution from the extended config is compatible
       with "verbatimModuleSyntax" behavior if that's enabled by the root or extended config.
       "@vue/tsconfig/tsconfig.dom.json" usually handles this well.
       If PropType errors persist, it means verbatimModuleSyntax is active.
    */
    "esModuleInterop": true, // Often good to have for better CJS/ESM interop, might be in extended config
    "resolveJsonModule": true // Also good, might be in extended config
  },
  "include": ["./src/**/*.ts", "./src/**/*.d.ts", "./src/**/*.tsx", "./src/**/*.vue"], // Added .d.ts for good measure
  "exclude": ["node_modules", "dist"] // Good to exclude node_modules and output dir
}