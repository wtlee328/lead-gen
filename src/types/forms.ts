// src/types/forms.ts

export interface FilterTag {
    id: string; // Unique ID for v-for key and removal, e.g., generated by uuid
    type: 'jobTitle' | 'industry' | 'location' | 'companySize' | 'keywords' | 'custom'; // 'custom' for other text based tags
    value: string;       // The actual data value
    displayValue: string;// What's shown to the user (e.g., translated industry name or the value itself)
    label: string;       // The category label (e.g., "Industry", "Keywords")
}

export interface LeadDataForSupabase { // Structure for data going to Supabase
    user_id?: string; // Will be populated from Supabase auth
    baserow_row_id?: string | null;
    contact_name?: string | null;
    company_name?: string | null;
    email?: string | null;
    phone?: string | null;
    status?: string | null;
    notes?: string | null;
    // Fields from original advanced search, if still relevant for Supabase record
    job_title?: string | null;
    industry?: string | null;
    location?: string | null;
    company_size?: string | null;
    source_keywords?: string[] | null; // If keywords were used to find this lead
    // Add other fields that match your Supabase 'leads' table columns
}

// This might represent the data collected *from the form itself* before transforming to LeadDataForSupabase
export interface ProspectFormState {
    mainQuery: string; // Could be used for general notes or a title for the lead
    jobTitle: string;
    industry: string;
    location: string;
    companySize: string;
    keywords: string; // Comma-separated keywords from input
    // Fields specifically for data captured from Baserow or manually entered
    baserowRowId?: string;
    contactName?: string;
    companyName?: string;
    email?: string;
    phone?: string;
    status?: string;
    customNotes?: string; // Renamed from 'notes' to avoid conflict if mainQuery is used for notes
}